name: Deploy DARK-NOVA-XMD

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 */5 * * *'  # Run every 5 hours to stay under 6-hour limit

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 350  # Just under 6 hours

    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: |
        npm install
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Create sessions directory
      run: mkdir -p sessions

    - name: Create config.env from environment variables
      run: |
        echo "SESSION_ID=${{ secrets.SESSION_ID }}" > config.env
        echo "PREFIX=${{ secrets.PREFIX || '.' }}" >> config.env
        echo "MODE=${{ secrets.MODE || 'public' }}" >> config.env
        echo "OWNER_NUMBER=${{ secrets.OWNER_NUMBER }}" >> config.env
        echo "BOT_NAME=${{ secrets.BOT_NAME || 'DARK-NOVA-XMD' }}" >> config.env
        echo "ALWAYS_ONLINE=${{ secrets.ALWAYS_ONLINE || 'false' }}" >> config.env
        echo "AUTO_STATUS_SEEN=${{ secrets.AUTO_STATUS_SEEN || 'true' }}" >> config.env
        echo "AUTO_STATUS_REACT=${{ secrets.AUTO_STATUS_REACT || 'true' }}" >> config.env
        echo "ANTI_LINK=${{ secrets.ANTI_LINK || 'true' }}" >> config.env
        echo "ANTI_DEL=${{ secrets.ANTI_DEL || 'true' }}" >> config.env
        echo "WELCOME=${{ secrets.WELCOME || 'true' }}" >> config.env
        echo "READ_MESSAGE=${{ secrets.READ_MESSAGE || 'false' }}" >> config.env

    - name: Start application with auto-restart
      run: |
        # Create restart script
        cat > restart_bot.sh << 'EOF'
        #!/bin/bash
        while true; do
          echo "Starting DARK-NOVA-XMD..."
          npm start &
          PID=$!
          
          # Wait for 5 hours (18000 seconds) or until process dies
          for i in {1..18000}; do
            if ! kill -0 $PID 2>/dev/null; then
              echo "Bot process died, restarting..."
              break
            fi
            sleep 1
          done
          
          # If process is still running after 5 hours, kill it
          if kill -0 $PID 2>/dev/null; then
            echo "5-hour limit reached, restarting bot..."
            kill $PID
            wait $PID
          fi
          
          sleep 5
        done
        EOF
        
        chmod +x restart_bot.sh
        ./restart_bot.sh &

    - name: Keep alive with health check
      run: |
        # Health check script
        for i in {1..1800}; do
          if curl -f http://localhost:9090 >/dev/null 2>&1; then
            echo "Bot is running healthy"
            sleep 30
          else
            echo "Bot health check failed, restarting workflow..."
            exit 1
          fi
        done
